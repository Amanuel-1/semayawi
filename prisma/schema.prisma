// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    subSemayawiId String

    subSemayawi SubSemayawi @relation(fields: [subSemayawiId],references: [id],onDelete: Cascade,onUpdate: Cascade)
    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    profile Profile?
    bookmarks Bookmarks[]
    groups Group[]

    
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id String @id @default(cuid())
    userId String @unique
    preferences Json

    user  User  @relation(fields: [userId],references: [id])


}



model Bookmarks {
    id String @id @default(cuid())
    verseId  String // it would be of the format [book-chapter-verse]
    userId  String

    notes String

    user User @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)

}

model Group {
    id String @id @default(cuid())
    name String
    description String
    members User[]
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


model SubSemayawi {
    id String @id @default(cuid())
    name String
    description String
    route String
    posts Post[]

}





// user    favourites-->{
//                     id
//                     userId
//                     location "gen-2-20"
//                     note:" "
        

// }